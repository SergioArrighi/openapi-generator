#ifndef TINY_CPP_CLIENT_ABSTRACTSERVICE_H_
#define TINY_CPP_CLIENT_ABSTRACTSERVICE_H_
{{#isESP8266}}
#include <WiFiClient.h>
#include <ESP8266HTTPClient.h>
{{/isESP8266}}

{{#isESP32}}
#include <WiFiClientSecure.h>
#include <ArduinoHttpClient.h>
{{/isESP32}}
#include <list>

namespace Tiny {

/**
*  Class
* Generated with openapi::tiny-cpp-client
*/
class ApiConfiguration {
    private:
        std::string host = "";
        uint16_t port;
        std::string apiKeyHeaderName;
        std::string apiKey;
        std::string sslCertificate;

    public:
        // Constructor
        ApiConfiguration();

        // Getters
        std::string getHost() const;
        uint16_t getPort() const;
        std::string getApiKeyHeaderName() const;
        std::string getApiKey() const;
        std::string getSslCertificate() const;

        // Setters
        void setHost(const std::string host);
        void setPort(const uint16_t port);
        void setApiKeyHeaderName(const std::string apiKeyHeaderName);
        void setApiKey(const std::string apiKey);
        void setSslCertificate(const std::string sslCertificate);
};

/**
*  Class
* Generated with openapi::tiny-cpp-client
*/
class Service {
    public:
        std::unique_ptr<HttpClient> client;
        {{#isESP8266}}
        WiFiClient client;
        {{/isESP8266}}
        {{#isESP32}}
        WiFiClientSecure wifiClient;
        {{/isESP32}}
        std::string host = "";
        uint16_t port;
        std::string apiKeyHeaderName = "";
        std::string apiKey;
        std::string sslCertificate = "";
        std::string url = "";
        std::string payload = "";
        std::list<std::tuple<std::string, std::string>> queryParams;
        std::list<std::tuple<std::string, std::string>> formParams;

        Service();

        void setApiConfiguration(const ApiConfiguration conf);
        int sendRequest(std::string url, const char * method, const char * type, const char * payload, size_t size);
        String getResponseBody();

        void addQueryParam(std::string key, std::string value);
        void addFormParam(std::string key, std::string value);
        void addHeader(std::string key, std::string value);

    private:
        void begin(std::string url);
        void prepareRequest();
        std::string encodeKeyValueTuple(std::list<std::tuple<std::string, std::string>> params);

}; // end class
} // namespace Tinyclient

#endif /* TINY_CPP_CLIENT_ABSTRACTSERVICE_H_ */
