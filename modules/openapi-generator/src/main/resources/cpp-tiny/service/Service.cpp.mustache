#include "Service.h"
#include "Arduino.h"
#include <WiFiClientSecure.h>
#include <ArduinoHttpClient.h>

// Constructor implementation
Tiny::ApiConfiguration::ApiConfiguration() {
    // Initialize with default values
    host = "";
    port = 0;
    apiKeyHeaderName = "";
    apiKey = "";
    sslCertificate = "";
}

// Getters implementation
std::string Tiny::ApiConfiguration::getHost() const {
    return host;
}

uint16_t Tiny::ApiConfiguration::getPort() const {
    return port;
}

std::string Tiny::ApiConfiguration::getApiKeyHeaderName() const {
    return apiKeyHeaderName;
}

std::string Tiny::ApiConfiguration::getApiKey() const {
    return apiKey;
}

std::string Tiny::ApiConfiguration::getSslCertificate() const {
    return sslCertificate;
}

// Setters implementation
void Tiny::ApiConfiguration::setHost(const std::string host) {
    this->host = host;
}

void Tiny::ApiConfiguration::setPort(const uint16_t port) {
    this->port = port;
}

void Tiny::ApiConfiguration::setApiKeyHeaderName(const std::string apiKeyHeaderName) {
    this->apiKeyHeaderName = apiKeyHeaderName;
}

void Tiny::ApiConfiguration::setApiKey(const std::string apiKey) {
    this->apiKey = apiKey;
}

void Tiny::ApiConfiguration::setSslCertificate(const std::string sslCertificate) {
    this->sslCertificate = sslCertificate;
}

Tiny::Service::Service() {}

void Tiny::Service::setApiConfiguration(ApiConfiguration conf){
    host = conf.getHost();
    port = conf.getPort();
    apiKeyHeaderName = conf.getApiKeyHeaderName();
    apiKey = conf.getApiKey();
    sslCertificate = conf.getSslCertificate();
    client.reset(new HttpClient(this->wifiClient, this->host.c_str(), this->port));
}

{{#isESP8266}}
void Tiny::Service::begin(std::string url){
    http.begin(client, String(url.c_str()));

    // reset params
    queryParams.begin();
    formParams.begin();
}
{{/isESP8266}}
{{#isESP32}}
void Tiny::Service::begin(std::string url){
    wifiClient.setCACert(sslCertificate.c_str());

    // reset params
    queryParams.begin();
    formParams.begin();
}
{{/isESP32}}

void Tiny::Service::addHeader(std::string key, std::string value){
    client->sendHeader(String(key.c_str()), String(value.c_str()));
}

void Tiny::Service::addQueryParam(std::string key, std::string value){
    queryParams.push_back(std::make_tuple(key, value));
}

void Tiny::Service::addFormParam(std::string key, std::string value){
    formParams.push_back(std::make_tuple(key, value));
}

int Tiny::Service::sendRequest(std::string url, const char * method, const char * type, const char * payload, size_t size){
    this->url = url;
    prepareRequest();
    begin(this->url);
    client->beginRequest();
    if (method == HTTP_METHOD_GET)
        client->get((this->url).c_str());
    else if (method == HTTP_METHOD_POST)
        client->post((this->url).c_str());
    else if (method == HTTP_METHOD_PATCH)
        client->patch((this->url).c_str());
    else if (method == HTTP_METHOD_PUT)
        client->put((this->url).c_str());
    else if (method == HTTP_METHOD_DELETE)
        client->del((this->url).c_str());
    if (!apiKeyHeaderName.empty() && !apiKey.empty())
        client->sendHeader(apiKeyHeaderName.c_str(), apiKey.c_str());
    if (method != HTTP_METHOD_GET && method != HTTP_METHOD_DELETE) {
        client->sendHeader(HTTP_HEADER_CONTENT_TYPE, type);
        client->sendHeader(HTTP_HEADER_CONTENT_LENGTH, strlen(payload));
        client->print(payload);
    }
    client->endRequest();
    int httpCode = client->responseStatusCode();
    return httpCode;
}

void Tiny::Service::prepareRequest(){
    if (!queryParams.empty()){
        url += "?" + encodeKeyValueTuple(queryParams);
    }

    if (!formParams.empty()){
        payload = encodeKeyValueTuple(formParams);
    }
}

std::string Tiny::Service::encodeKeyValueTuple(std::list<std::tuple<std::string, std::string>> params){
    std::string encoded = "";
    for (auto const& tuple : params) {
        encoded += std::get<0>(tuple) + "=" + std::get<1>(tuple) + "&";
    }

    // Remove last '&' char from url
    if (! encoded.empty())
        encoded.pop_back();

    return encoded;
}


String Tiny::Service::getResponseBody(){
    String response = client->responseBody();
    return response;
}

