#include "Service.h"
#include "Arduino.h"
#include <WiFiClientSecure.h>
#include <ArduinoHttpClient.h>

// Constructor implementation
Tiny::ApiConfiguration::ApiConfiguration() {
    // Initialize with default values
    host = "";
    port = 0;
    apiKey = "";
    sslCertificate = "";
}

// Getters implementation
String Tiny::ApiConfiguration::getHost() const {
    return host;
}

uint16_t Tiny::ApiConfiguration::getPort() const {
    return port;
}

String Tiny::ApiConfiguration::getApiKey() const {
    return apiKey;
}

String Tiny::ApiConfiguration::getSslCertificate() const {
    return sslCertificate;
}

// Setters implementation
void Tiny::ApiConfiguration::setHost(const String host) {
    this->host = host;
}

void Tiny::ApiConfiguration::setPort(const uint16_t port) {
    this->port = port;
}

void Tiny::ApiConfiguration::setApiKey(const String apiKey) {
    this->apiKey = apiKey;
}

void Tiny::ApiConfiguration::setSslCertificate(const String sslCertificate) {
    this->sslCertificate = sslCertificate;
}

Tiny::Service::Service() {}

void Tiny::Service::setApiConfiguration(ApiConfiguration conf){
    this->host = conf.getHost();
    this->port = conf.getPort();
    this->sslCertificate = conf.getSslCertificate();
    this->apiKey = conf.getApiKey();
}

{{#isESP8266}}
void Tiny::Service::begin(std::string url){
    http.begin(client, String(url.c_str()));

    // reset params
    queryParams.begin();
    formParams.begin();
}
{{/isESP8266}}
{{#isESP32}}
void Tiny::Service::begin(std::string url){
    this->wifiClient.setInsecure();
    this->client.reset(new HttpClient(this->wifiClient, this->host, this->port));

    // reset params
    queryParams.begin();
    formParams.begin();
}
{{/isESP32}}

void Tiny::Service::addHeader(std::string key, std::string value){
    this->client->sendHeader(String(key.c_str()), String(value.c_str()));
}

void Tiny::Service::addQueryParam(std::string key, std::string value){
    formParams.push_back(std::make_tuple(key, value));
}

void Tiny::Service::addFormParam(std::string key, std::string value){
    formParams.push_back(std::make_tuple(key, value));
}

int Tiny::Service::sendRequest(std::string url, const char * type, uint8_t * payload, size_t size){
    this->url = url;
    prepareRequest();

    begin(this->url);

    client->beginRequest();
    client->get((this->url).c_str());
    this->addHeader("X-API-Key", this->apiKey.c_str());
    client->endRequest();

    int httpCode = client->responseStatusCode();
    return httpCode;
}

void Tiny::Service::prepareRequest(){
    if (!queryParams.empty()){
        this->url += "?" + encodeKeyValueTuple(this->queryParams);
    }

    if (!formParams.empty()){
        this->payload = encodeKeyValueTuple(this->formParams);
    }
}

std::string Tiny::Service::encodeKeyValueTuple(std::list<std::tuple<std::string, std::string>> params){
    std::string encoded = "";
    for (auto const& tuple : params) {
        encoded += std::get<0>(tuple) + "=" + std::get<1>(tuple) + "&";
    }

    // Remove last '&' char from url
    if (! encoded.empty())
        encoded.pop_back();

    return encoded;
}


String Tiny::Service::getResponseBody(){
    String response = client->responseBody();
    return response;
}

